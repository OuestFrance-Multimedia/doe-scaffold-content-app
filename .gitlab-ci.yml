include:
  - project: additi/internal/dsi-devops-engineers/gitlab-templates-common
    file: .gitlab-ci-common.yml
    ref: master

stages:
  - build
  - tests
  - push
  - deploy

build:
  extends: .build
  variables:
    # Set build-time variables
    # 20 indexes can be used: DOCKER_BUILD_ARG_01 to DOCKER_BUILD_ARG_20
    # DOCKER_BUILD_ARG_01: KEY=VALUE

    # Pass secret information to be used in the Dockerfile for building docker images 
    # in a safe way that will not end up stored in the final image.
    # References:
    # - https://docs.docker.com/develop/develop-images/build_enhancements/#new-docker-build-secret-information
    # You can add CI/CD variable of type `file` and by path to the temp file, example: /builds/${CI_PROJECT_PATH}.tmp/[KEY]
    # References:
    # - https://docs.gitlab.com/ee/ci/variables/index.html#add-a-cicd-variable-to-a-project
    # - https://docs.gitlab.com/ee/ci/variables/index.html#add-a-cicd-variable-to-a-group
    # 20 indexes can be used: DOCKER_BUILD_SECRET_01 to DOCKER_BUILD_SECRET_20
    # DOCKER_BUILD_SECRET_01: id=google_application_credentials_bucket,src=/builds/${CI_PROJECT_PATH}.tmp/GOOGLE_APPLICATION_CREDENTIALS_BUCKET

    # Name of the Dockerfile (Default is 'build/Dockerfile')
    DOCKER_BUILD_DOCKERFILE: build/Dockerfile
    # The Docker build context refers to the files and directories that will be available to the Docker engine when you run docker build
    DOCKER_BUILD_CONTEXT: .

Test Unit:
  stage: tests
  script:
    - docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    # - `docker run` your container here
    # - `docker exec` your tests here
  # Extract code coverage to get the info in gitlab : https://docs.gitlab.com/ee/ci/yaml/#coverage
  # coverage: /^\s*Lines:\s*\d+.\d+\%/

push-dev:
  needs: [build]
  extends: .push
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    # define Gitlab variable which contains Google Application Credentials: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED or $GOOGLE_APPLICATION_CREDENTIALS_RESTRICTED
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  only :
    - develop

deploy-dev1:
  needs: [push-rec]
  extends: .deploy
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    # define branch on platform repository to use : unrestricted or restricted
    BRANCH: unrestricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  only:
    - develop

push-rec:
  needs: [build]
  extends: .push
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    # define Gitlab variable which contains Google Application Credentials: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED or $GOOGLE_APPLICATION_CREDENTIALS_RESTRICTED
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  when: manual
  except :
    - tags
    - master
    - develop

deploy-rec1:
  needs: [push-rec]
  extends: .deploy
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    # define branch on platform repository to use : unrestricted or restricted
    BRANCH: unrestricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  when: manual
  except:
    - tags
    - master
    - develop

push-prod-preprod:
  needs: [build]
  extends: .push
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_RESTRICTED
    # define Gitlab variable which contains Google Application Credentials: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED or $GOOGLE_APPLICATION_CREDENTIALS_RESTRICTED
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_RESTRICTED
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_TAG
  only :
    - tags

deploy-preprod:
  needs: [push-prod-preprod]
  extends: .deploy
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_RESTRICTED
    # define branch on platform repository to use : unrestricted or restricted
    BRANCH: restricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_TAG
  only:
    - tags

deploy-prod:
  needs: [push-prod-preprod]
  extends: .deploy
  variables:
    # define Gitlab variable which contain container image repository (registry): $REPOSITORY_UNRESTRICTED or $REPOSITORY_RESTRICTED
    REPOSITORY: $REPOSITORY_RESTRICTED
    # define branch on platform repository to use : unrestricted or restricted
    BRANCH: restricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
    # define Gitlab variable which contains image tag, based on $CI_COMMIT_TAG or $CI_COMMIT_SHORT_SHA
    IMAGE_TAG: $CI_COMMIT_TAG
  when: manual
  allow_failure: false
  only:
    - tags

