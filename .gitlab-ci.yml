.template_push_into_registry: &template_push_into_registry
  stage: push
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  before_script:
    # Log to Google Cloud platform
    - echo "$GOOGLE_APPLICATION_CREDENTIALS" > "$(pwd)/google-application-credentials.json"
    - gcloud auth activate-service-account --key-file=$(pwd)/google-application-credentials.json
  script:
    # Configure Docker to use the project registry (Google Artifact Registry)
    - gcloud auth configure-docker ${REPOSITORY%%/*} --quiet
    # Check if IMAGE_TAG already exists (Retry case)
    - EXISTS=$(gcloud artifacts docker tags list $REPOSITORY/$CI_PROJECT_NAME --format=yaml --filter="tag~"$IMAGE_TAG || :)
    # If not exists, login, pull, tag and push image
    - test -z $EXISTS && docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - test -z $EXISTS && docker pull $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$IMAGE_TAG
    - test -z $EXISTS && docker tag $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$IMAGE_TAG $REPOSITORY/$CI_PROJECT_NAME:$IMAGE_TAG
    - test -z $EXISTS && docker push $REPOSITORY/$CI_PROJECT_NAME:$IMAGE_TAG

.template_deploy_into_infrastructure: &template_deploy_into_infrastructure
  stage: deploy
  before_script:
    ## SSH Configuration
    - apk add git
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - cat $SSH_PRIVATE_KEY > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan gitlab.com > ~/.ssh/known_hosts
    - ssh -q -T git@gitlab.com

    ## GIT Configuration
    - git config --global user.name $GITLAB_USER_LOGIN
    - git config --global user.email $GITLAB_USER_EMAIL
  script:
    ## Clone, commit & push
    - git clone -b $BRANCH --single-branch $SSH_URL_TO_MANIFEST_REPO && cd $(basename $SSH_URL_TO_MANIFEST_REPO|sed -r s/\.git$//)
    - docker run --rm -v $PWD:/workdir mikefarah/yq:4.7.0 eval '.image.repository = "'$REPOSITORY/$CI_PROJECT_NAME'"' --inplace $VALUES_FILENAME
    - docker run --rm -v $PWD:/workdir mikefarah/yq:4.7.0 eval '.image.tag = "'${CI_COMMIT_TAG}'"' --inplace $VALUES_FILENAME
    - git commit -am "update image tag" && git push origin $BRANCH


image: docker:20.10

services:
  - docker:20.10-dind

stages:
  - build
  - tests
  - push
  - deploy

Build:
  stage: build
  variables: {}
    # DOCKER_BUILDKIT: 1
  script:
    - export IMAGE_TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:latest || true
    # - `docker build` your image here
    # - >
    #   docker build \
    #     --build-arg BUILDKIT_INLINE_CACHE=1 \
    #     --cache-from $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:latest \
    #     --tag $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA \
    #     --secret id=gcp,src=$GOOGLE_APPLICATION_CREDENTIALS_BUCKET \
    #     --file build/Dockerfile \
    #     .
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:latest
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$IMAGE_TAG
    - docker images
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$IMAGE_TAG
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:latest

Test Unit:
  stage: tests
  script:
    - docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    # - `docker run` your container here
    # - `docker exec` your tests here
  # Extract code coverage to get the info in gitlab : https://docs.gitlab.com/ee/ci/yaml/#coverage
  # coverage: /^\s*Lines:\s*\d+.\d+\%/

Push-dev:
  <<: *template_push_into_registry
  variables:
    DOCKER_HOST: tcp://docker:2375
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  when: manual
  except :
    - tags
    - master
    - develop

Push-rec:
  <<: *template_push_into_registry
  variables:
    DOCKER_HOST: tcp://docker:2375
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_UNRESTRICTED
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  only :
    - develop

Push-prod-preprod:
  <<: *template_push_into_registry
  variables:
    DOCKER_HOST: tcp://docker:2375
    REPOSITORY: $REPOSITORY_RESTRICTED
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_RESTRICTED
    IMAGE_TAG: $CI_COMMIT_TAG
  only :
    - tags

deploy-dev1:
  <<: *template_deploy_into_infrastructure
  variables:
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    BRANCH: unrestricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
  when: manual
  except:
    - tags
    - master
    - develop

deploy-rec1:
  <<: *template_deploy_into_infrastructure
  variables:
    REPOSITORY: $REPOSITORY_UNRESTRICTED
    BRANCH: unrestricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
  only:
    - develop
  needs: [Push-rec]

deploy-preprod:
  <<: *template_deploy_into_infrastructure
  variables:
    REPOSITORY: $REPOSITORY_RESTRICTED
    BRANCH: restricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
  only:
    - tags
  needs: [Push-prod-preprod]

deploy-prod:
  <<: *template_deploy_into_infrastructure
  variables:
    REPOSITORY: $REPOSITORY_RESTRICTED
    BRANCH: restricted
    # insert the name of the helm yaml values file for this platform
    VALUES_FILENAME: ""
  when: manual
  allow_failure: false
  only:
    - tags
  needs: [Push-prod-preprod]

